"""
This is the companion script to Algae_GO.py 

This script calculates the optical properties (single scattering albedo, assymetry parameter,
mass absorption coefficient and extinction, scattering and absorption cross sections) for
spherical algal cells. The optical properties are then saved into netCDF files in the 
correct format for loading into one of the models in the BioSNICAR radiative transfer model family.

The script is divided into three functions. The first is a preprocessing function
that ensures the wavelengths and real/imaginary parts of the refractive index for ice is
provided in the correct waveband and correct spectral resolution to interface with the
BioSNICAR_GO model. The imaginary refractive indices are taken from a separate script that
mixes algal pigments and calculates a bulk refractive index for the cell.

# NB MAKE SURE OUTPUT PATH FROM BIOOPTICAL_MODEL.PY AND INPUT PATHS IN ALGAE_MIE.PY MATCH!!!


# DEPENDENCIES AND ENVIRONMENT

 this script runs in the environment BioSNICAR_py
 a key dependency is Scott Prahl's MiePython package: https://github.com/scottprahl/miepython
 MiePython is used to calculate the single scattering optical properties from the refractive
 index and cell radius


"""

import numpy as np
import matplotlib.pyplot as plt
import scipy as sci
from scipy.integrate import quad
import csv
from math import exp
from miepython import mie


filepath = '/home/joe/Code/BioSNICAR_GO_PY/CW/' # save path for full spectrum version


def preprocess_RI(name):

    """
    name is the component of the filename that identifies the specific model run. This can
    be a number or a string (e.g. for a recent experiment I simply named a succession of 
    cells with varying pigments 1,2,3,4. Providing the name as a kwarg ensures consistency across
    the various functions)

    """

    # load input files for real RI, imaginary RI, mass absorption coefficient. Set wavelength array.
    wavelengths = np.arange(0.305, 5, 0.01)  # 300 - 5000 nm in 10 nm steps
    reals = pd.read_csv(str(filepath + "chll_only_{}_Real.csv".format(name)), header=None)
    reals = np.array(reals)
    imags = pd.read_csv(str(filepath + "chll_only_{}_KK.csv".format(name)), header=None)
    imags = np.array(imags)

    return reals, imags, wavelengths


def calc_optical_params(cell_radius, density, reals, imags, wavelengths, name, plots=False):
    """
    cell radius is in microns
    density is in kg/m3
    reals is generated by preprocess_RI()
    imags is generated by preprocess_RI()
    wavelengths is generated by preprocess_RI()
    name is the component of the filename that identifies the specific model run
    plots is a Boolean that toggles plotting of the oprical params

    """

    qqabs = np.zeros(len(wavelengths))
    qqsca = np.zeros(len(wavelengths))
    qqext = np.zeros(len(wavelengths))
    MAC = np.zeros(len(wavelengths))
    assym = np.zeros(len(wavelengths))

    for i in np.arange(0,len(wavelengths),1):
    # Use K to drive mie solver
        
        m = reals[i][0]
        k = imags[i][0]

        X = 2*np.pi*cell_radius/wavelengths[i]


        qext, qsca, qback, g = mie(complex(str("{}-{}j".format(m,k))),X)

        abs_coeff = 4 * np.pi * (imags[i] / wavelengths[i]*1000)

        qabs = qext - qsca
        
        qqabs[i]=qabs*np.pi*cell_radius**2 # calculate cross section from efficiency
        qqsca[i]=qsca*np.pi*cell_radius**2 # calculate cross section from efficiency
        qqext[i]=qext*np.pi*cell_radius**2 # calculate cross section from efficiency

        MAC[i] = abs_coeff/density # calculate mass absorption coefficient from cross section
        assym[i] = g
        ss_alb = qqsca/qqext


    if plots:

        plt.figure(1)
        plt.plot(wavelengths,qqabs,'b',label='absorption cross section')
        plt.plot(wavelengths,qqsca,'g',label='scattering cross section')
        plt.plot(wavelengths,qqext,'r', label= 'extinction cross section')
        plt.xlim(0.3,2.5)
        
        plt.ylabel(r"Cross Section ($\mu$m$^2$)")
        plt.xlabel('Wavelength (nm)')
        plt.legend(loc='best')
        plt.savefig(str(filepath + "Figs/" + "crosssections{}.jpg".format(name)),dpi=150)
        
        plt.figure(2)
        plt.plot(wavelengths,MAC,label='Mass Absorption Coefficient (m$^2$/kg)')
        plt.xlim(0.3,2.5)
        plt.ylim(0,1.0)
        plt.xlabel('Wavelength (nm)')
        plt.ylabel('MAC algae (m$^2$ / kg)')
        plt.legend(loc='upper left')
        plt.savefig(str(filepath + "Figs/" + "MAC{}.jpg".format(name)),dpi=150)

        plt.show()

        return assym, ss_alb, MAC, cell_radius, density


def net_cdf_updater(filepath, assym, ss_alb, MAC, cell_radius, density, name):
    """
    filepath is the path to save the file to
    assym is the assymetry parameter g generated by calc_optical_params()
    ss_alb is the single scattering albedo generated by calc_optical_params()
    MAC is the mass absorption coefficient calculated by calc_optical_params()
    cell_radius is the radius of the cell in microns
    density is in kg/m3
    name is the component of the file name identifying te specific model run

    """

    filepathIN = filepath

    algfile = pd.DataFrame()
    algfile['asm_prm'] = assym
    algfile['ss_alb'] = ss_alb
    algfile['ext_cff_mss'] = MAC
    algfile = algfile.to_xarray()
    algfile.attrs['medium_type'] = 'air'
    algfile.attrs['description'] = 'Optical properties for algal cell: sphere of radius {}um'.format(str(cell_radius))
    algfile.attrs['psd'] = 'monodisperse'
    algfile.attrs['radius_um'] = cell_radius
    algfile.attrs['density_kg_m3'] = density
    algfile.attrs[
        'origin'] = 'Optical properties derived from mie calculations'
    algfile.to_netcdf(str(filepathIN + 'CW_chll_only_{}_{}.nc'.format(str(cell_radius), str(name))))

    return


name = 4
reals, imags, wavelengths = preprocess_RI(name)
assym, ss_alb, MAC, cell_radius, density = calc_optical_params(13, 1400, reals, imags, wavelengths, name, plots=True)
net_cdf_updater(filepath, assym, ss_alb, MAC, cell_radius, density, name)