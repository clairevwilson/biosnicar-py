
# This driver script allows the user to easily run the various funcs in
# utils.py. Simply choopse the function from the list below, uncomment
# the relevant section, change any parameters and run
# ```
# cd ~/BioSNICAR_GO_PY
# python ./experiments/driver.py
# ```
#
# AVAILABLE FUNCTIONS:
# --------------------
#
# find_best_params():
#
# This is used to do multiple runs of SNICAR and find the parameter
# set that best simulates a given field-measured spectrum
#
# match_field_spectrum(): for a given set of input params
# this function plots measured vs simulated spectra
#
# build_LUT(): constructs look up tables of be used by inverse model
#
# inverse_model(): Uses lookup tables to predict cell
# concentrations from spectra
#
# isolate_biological_effect(): calculate the proportion of albedo
# change attributed to biological or physical processes by spectral
# differencing.
#
# compare_predicted_and_measured(): provide a comparison between
# predictions made by the inverse model, 2BDA model and measured
# cell concentrations. Saves a figure to SAVEPATH.
#
# All calls to SNICAR assume solar zenith = 45 degrees,
# underlying surface has BBA = 0.1, Picard (2016) ice refractive
# index is used, grains are spherical.
"""
driver used to easily execute funcs in utils.py
"""
import sys
import numpy as np
import pandas as pd
import yaml
import utils
sys.path.append("./src")


##########################
#### LOAD CONFIG DATA ####
##########################

with open("./experiments/config.yaml", "r") as ymlfile:
    cfg = yaml.load(ymlfile, Loader=yaml.FullLoader)

# define paths and constants
SAVEPATH = cfg["PATHS"]["SAVEPATH"]
CI_SITES = cfg["SAMPLES"]["CI_SITES"]
DISP_SITES = cfg["SAMPLES"]["DISP_SITES"]
LA_SITES = cfg["SAMPLES"]["LA_SITES"]
HA_SITES = cfg["SAMPLES"]["HA_SITES"]
APPLY_ARF = cfg["ARF"]["APPLY_ARF"]
PLOT_ARF = cfg["ARF"]["PLOT_ARF"]
ARF_PATH = cfg["PATHS"]["ARF_DATA"]
ALBEDO_DATA = cfg["PATHS"]["ALBEDO_DATA"]
HCRF_DATA = cfg["PATHS"]["HCRF_DATA"]
METADATA = cfg["PATHS"]["METADATA"]
ALL_FIELD_SAMPLES = cfg["SAMPLES"]["ALL_SITES"]
WEIGHT = cfg["FIND_BEST_PARAMS"]["WEIGHT"]
CLEAN = cfg["FIND_BEST_PARAMS"]["CLEAN"]

# generate ARF data
ARF_CI_DF = pd.read_csv(ARF_PATH)
ARF_CI = np.mean(np.array(
    ARF_CI_DF[ARF_CI_DF.columns.intersection(CI_SITES)]), axis=1)
ARF_CI = ARF_CI[::10]
ARF_HA_DF = pd.read_csv(ARF_PATH)
ARF_HA = np.mean(np.array(
    ARF_HA_DF[ARF_HA_DF.columns.intersection(HA_SITES)]), axis=1)
ARF_HA = ARF_HA[::10]

# set path to field spectral database - reflectance if ARF is applied, albedo
# if not the ARF adjusts the SNICAR simulated albedo to give nadir reflectance

if APPLY_ARF:
    FIELD_DATA_FNAME = HCRF_DATA

else:
    FIELD_DATA_FNAME = ALBEDO_DATA

# set parallel arrays of filenames plus density, radius, thickness, model algal concn (ppb)
# and measured algal concn (cells/mL) for each sample to plot.
# These value are likely generated by repeated calls to find_best_params()

if APPLY_ARF:
    FNAMES = cfg["MATCH_FIELD_DATA"]["PARAMS"]["HCRF_BEST_MATCH"]["FNAMES"]
    RHO = cfg["MATCH_FIELD_DATA"]["PARAMS"]["HCRF_BEST_MATCH"]["RHO"]
    RDS = cfg["MATCH_FIELD_DATA"]["PARAMS"]["HCRF_BEST_MATCH"]["RDS"]
    DZ = cfg["MATCH_FIELD_DATA"]["PARAMS"]["HCRF_BEST_MATCH"]["DZ"]
    ALG = cfg["MATCH_FIELD_DATA"]["PARAMS"]["HCRF_BEST_MATCH"]["ALG"]
    CELLS = cfg["MATCH_FIELD_DATA"]["PARAMS"]["HCRF_BEST_MATCH"]["CELLS"]

else:
    FNAMES = cfg["MATCH_FIELD_DATA"]["PARAMS"]["ALBEDO_BEST_MATCH"]["FNAMES"]
    RHO = cfg["MATCH_FIELD_DATA"]["PARAMS"]["ALBEDO_BEST_MATCH"]["RHO"]
    RDS = cfg["MATCH_FIELD_DATA"]["PARAMS"]["ALBEDO_BEST_MATCH"]["RDS"]
    DZ = cfg["MATCH_FIELD_DATA"]["PARAMS"]["ALBEDO_BEST_MATCH"]["DZ"]
    ALG = cfg["MATCH_FIELD_DATA"]["PARAMS"]["ALBEDO_BEST_MATCH"]["ALG"]
    CELLS = cfg["MATCH_FIELD_DATA"]["PARAMS"]["ALBEDO_BEST_MATCH"]["CELLS"]


#########################################
### RUN FUNCS (UNCOMMENT TO ACTIVATE) ###
#########################################

success = utils.match_field_spectra(FIELD_DATA_FNAME, FNAMES, RHO, RDS, DZ, ALG, CELLS,
                              CI_SITES, LA_SITES, HA_SITES, APPLY_ARF, PLOT_ARF,
                              ARF_CI, ARF_HA, SAVEPATH)


success = utils.run_best_params(SAVEPATH, ALL_FIELD_SAMPLES, FIELD_DATA_FNAME, CI_SITES,
                          LA_SITES, HA_SITES, WEIGHT, CLEAN)


# 3) to estimate biological and physical contributions to albedo reduction
# delAbioLA, delAphysLA, delAbioHA, delAphysHA  =
#   isolate_biological_effect(FIELD_DATA_FNAME,CI_SITES,LA_SITES,HA_SITES, SAVEPATH)
# print("**LIGHT ALGAE**")
# print("Total BBA change = {}".format(delAbioLA+delAphysLA))
# print("Change in BBA due to glacier algae = {}".format(delAbioLA))
# print("Change in BBA due to weathering crust degradation = {}".format(delAphysLA))

# print("**HEAVY ALGAE**")
# print("Total BBA change = {}".format(delAbioHA+delAphysHA))
# print("Change in BBA due to glacier algae = {}".format(delAbioHA))
# print("Change in BBA due to weathering crust degradation = {}".format(delAphysHA))


# # BUILD LUT
# dz = [0.02, 0.03, 0.04, 0.05, 0.06 ,0.07]
# densities = [600, 650, 700, 750, 800, 850]
# radii = [600, 700, 800, 900, 1000]
# algae = [30000, 32000, 34000, 36000, 38000, 40000]
# wavelengths = np.arange(0.2,5,0.01)
# save_LUT = True
# SAVEPATH = '/home/joe/Desktop/'
# LUT = build_LUT([37], dz, densities, radii, algae, wavelengths, save_LUT,\
#  APPLY_ARF, ARF_CI, ARF_HA, SAVEPATH)


# 5) run inverse model
#path_to_LUTs = '/home/joe/Code/'
#FIELD_DATA_FNAME =
#   '/home/joe/Code/Remote_Ice_Surface_Analyser/Training_Data/HCRF_master_16171819.csv'
#Out = inverse_model(FIELD_DATA_FNAME,path_to_LUTs)


# 6) Field vs model comparison
#compare_predicted_and_measured(SAVEPATH, METADATA)
